What is Docker image?
--------------------------
RFS + UFS + APPFS
------------------------

  871  ls
  872  docker images
  873  docker rmi rabbitmq httpd tomcat  postgres  python  nginx ubuntu centos
  874  clear
  875  ls
  876  docker images
  877  docker info
  878  clear
  879  cd /var/lib/docker
  880  ls
  881  docker info
  882  clear
  883  ls
  884  du -sh overlay2/
  885  docker pull ubuntu
  886  clear
  887  ls
  888  cd overlay2/
  889  ls
  890  docker inspect ubuntu
  891  clear
  892  ls
  893  docker history ubuntu
  894  pwd
  895  docker images
  896  docker rmi ubuntu
  897  clear
  898  ls
  899  ls
  900  du -sh
  901  docker pull httpd
  902  ls
  903  du -h --max-depth=1
  904  clear
  905  cd ./2112232558f76d8e2077ed4d9675e789095155c76454a1c4eaf9fd9f7e1b90f3
  906  ls
  907  ls
  908  cd diff/
  909  ls
  910  cd ..
  911  ls
  912  cd ..
  913  ls
  914  clear
  915  du -h --max-depth=1
  916  cd ./3f1abfe2493fe925145421f832d01007fc24464c9bc31e983410b3a8f592c77e
  917  ls
  918  cd diff/
  919  ls
  920  docker ps -a
  921  docker ps -a
  922  docker stop e828064f58d9
  923  docker rm e828064f58d9
  924  clear
  925  ls
  926  docker ps -a
  927  ls
  928  cd ..
  929  ls
  930  cd ..
  931  ls
  932  clear
  933  ls
  934  docker run -d httpd
  935  ls
  936  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc
  937  du -sh 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc
  938  du -sh 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc-init
  939  du -sh 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc
  940  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc
  941  docker ps
  942  docker stop b3f47c6b5236
  943  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc
  944  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc/diff/
  945  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc/diff/usr/
  946  ls 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc/diff/usr/local/
  947  du -sh 4b986cb6dd6a377b597d86c3fd679e6ce54561d73c05530b9f934ec70dc6b4cc/diff/usr/local
  948  cleaatr
  949  clear
  950  ls
  951  docker start b3f47c6b5236
  952  docker exec -it b3f47c6b5236 /bin/bash
  953  find . -name ramukaka.txt
  954  df -kh
  955  docker stop b3f47c6b5236
  956  find . -name ramukaka.txt
  957  docker start b3f47c6b5236
  958  find . -name ramukaka.txt
  959  history
========================================================
Base - Ubuntu
---------git - apache - mysql - mongodb
=====================================
 2 Method
===========================
Method - 1 - Manual -- 1 Layer every time 
- Existing container

  962  docker kill $(docker ps -q)
  963  docker rm -f $(docker ps -a -q)
  964  clear
  965  docker
  966  clear
  967  docker run -itd ubuntu
  968  docker ps
  969  docker attach 108b27be953b
  970  git
  971  docker attach 108b27be953b
  972  ls
  973  cd
  974  clear
  975  ls
  976  vi index.html
  977  ls
  978  docker ps
  979  history
  980  clear
  981  ls
  982  docker ps
  983  docker cp index.html 108b27be953b:/tmp
  984  docker attach 108b27be953b
  985  clear
  986  docker ps
  987  docker exec 108b27be953b git
  988  clear
  989  docker exec 108b27be953b which apache2
  990  docker exec 108b27be953b mysql
  991  docker exec 108b27be953b mongo
  992  clear
  993  docker ps
  994  docker images
  995  docker commit -m"ub-up-git-mysql-mog" -a"Rajesh Kumar" 108b27be953b ub-up-git-mysql-mog
  996  docker images
  997  docker history ubuntu
  998  docker history ub-up-git-mysql-mog
  999  clear
 1000  docker images
 1001  docker run -itd --name=ramu1 ub-up-git-mysql-mog
 1002  docker exec ramu1 git
 1003  clear
 1004  docker attach ramu1
-------------------------------
How to share an images?
-----------------------
- tar ball

 1015  docker ps -a
 1016  docker stop 3e7211e5d9f1
 1017  docker rm 3e7211e5d9f1
 1018  clear
 1019  docker images
 1020  docker rmi ub-up-git-mysql-mog
 1021  clear
 1022  docker images
 1023  ls
 1024  docker loan -i ub-up-git-mysql-mog.tar
 1025  clear
 1026  docker load -i ub-up-git-mysql-mog.tar
 1027  history



- hub.docker.com
- Step 1 - Register at hub.docker.com
- Step 2 - Login
- Step 3 - Create a repo at hub
- Step 4 - MAKE sure a LR name MUST match with HUB repo name
$ docker tag raju3 devopsschools/23-nov-202
---------
useradd <raj>
usermod -aG wheel raj
su <raj>
---------
- Step 5 - docker login
- Step 6 - docker push devopsschools/23-nov-202





Method - 2 - Automated -- All Layer @ one go
- Dockerfile
===============================================
Rules of Dockerfile
- DATA layer - /var/lib/docker/overlay2 -- e.g somefiles
- Meta Layer - /var/lib/docker/image   -- env, runtime, network

- EACH LINE is Creating ONE LAYER
- Layer is created from a container from the previous line's layer.

--------------
FROM ubuntu
MAINTAINER Rajesh kumar < rajesh@devopsschool.com>
RUN apt-get update && apt-get install git -y
RUN apt-get install apache2 -y
RUN apt-get install mysql-server -y
RUN apt-get install mongodb -y
COPY index.html /tmp
ENV JAVA_HOME=/tmp/java


FROM	- Base Image
RUN	- Run a command in container
ADD	- COPy and EXTRACT
COPY	- COPY
EXTRACT - EXTRACT
EXPOSE 	- SET INFORAMTIONAL PORT
USER	- user to run container
VOLUME
WORKDIR	- user default user home
ENV	- set a cont env
ARG	- set arg for dockerfile 

[root@ip-172-31-5-96 rajesh]# history | grep build
 1102  docker build -t rajesh .
 1105  docker build -t rajesh .
 1108  docker build -t rajesh .

$ docker build -t rajesh .

$ docker build -f filename -t rajesh .

-----------------------------------------
CMD
ENRTYPOINT
==================================

How to set PID1?
-----------------------
CMD
ENRTYPOINT
-----------------------------------
- CMD can be replaced
- ENTRYPOINT CAN NOT BE replaced

============================
2 CMD
2 ENTRYPOINT
1 CMD 1 ENTRYPOINT
https://devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html

Mode of Execution
---------------------------
Exec mode [[[ /bin/ls	/bin/python
shell  [[[ ls python




Dcoker volume

https://docs.docker.com/develop/develop-images/multistage-build/


dcoekr run -d -p 8080:8080 -p 55000:50000 jenkins














