Rajesh Kumar
---------------------------------------
Docker - 2 Days
Kubern - 3 Days
=====================
Demo + LAB = AWS
======================
10 AM IST - 6 PM IST
-----------------------
Lunch - 
	1 - 2 PM
BREAK 
	15 mins
	- 11.30
	- 4:00
----------------------------
What is Docker?
-------------------------------
	- Tool
	- Platform
		For 
			Managing Container
	Release
		CE
		EE
		https://www.devopsschool.com/blog/?s=docker+enterprise
	Version
		20.X
	Written in Go Lang
	FREE + OS
	By Soloman Hykes

TOOL
	Save time
		during running apps
		P.S	VS		Container
		-------------------------------
		1 DAY --> 5 mins ->  1 Sec
	Save cost
		Running a app in container is lightweight
		- less cpu
		- less ram
		- less stor
		- no os	
	Improve a Quality of work


What is Container?
---------------------------------
is a APP run time env
is a APP fully independent run time env
is a APP fully independent light run time env
is a APP fully independent light run time env - called light vm

is a 
	collection of 
	1 init of Net ns
	1 init of PID ns
	1 init of mnt ns
	1 init of user ns
	---------------
	SAME USER IS ATTACHED WOHT NET +PID + MNT


-----------
Container is NOT OS - thus no lean OS
Container is NOT VM - thus no lean VM

=============================================================
What are the Resources you require to RUN a App?
=============================================================

HARDWARE
	- OS
	     - PREREQ
		     - APP
============================================
HARDWARE
	- OS
		KERNAL(boot)
			Namepspace

					FROM	Require		Can Create 		OS ALLOWED
			FILESYSTEM	MNTNS	1		UNLIMITED		1
			(root+user)
			USER		USERNS	1		UNLIMITED		UNLIMITED		
			PID		PIDNS	1		UNLIMITED		1
			Network		NETNS	1		UNLIMITED		1
			
		     			- APP(apache)
			
			Cababilities		
			USERS require a permission to run perm.

			CGROUPS
			- Allocate CPU and RAM to pID
============================================
What is KERNAL?
The kernel is a computer program at the core of a computer's operating system and has complete control over everything in the system. 

What is FILESYSTEM?
- a collection of files/dir for specific purpose

BOOT FILESYSTEM === KERNAL
ROOT FILESYSTEM 
USER FILESYSTEM 
APP FILESYSTEM 


APP < USER < ROOT < BOOT


BOOT -> ROOT -> USER -> APP
============================================
Linux	- centos/ubuntu -> root -> ls or java or xyz
Windows
================================================================================================
How we run APPS througout a history?
------------------------------------------------------------------------------------------------
PHYSICAL SERVER		--> Virtual Server ------> 
================================================================================
HD
OS
KER
NS
1 RFS
1 NET
1 USER
1 PID
-------------
APP

		
=====================================================================================================
Docker Architecutre
==============================

Human -> Docker client ---REST--> Docker Sever -> ContainerD --> Kernal 
        ---------------------------------
		Docker Engine

https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/

-----------------------------

Docker Components
-------------------------------------------------
Docker Engine -
-----------------------

Vm Image Contains
-----------------------------------------
BOOT FS + ROOT FS + USER FS + APP FS

Docker Image - 
-----------------------------------------
ROOT FS + USER FS	 
ROOT FS + USER FS + APP FS
ROOT FS + USER FS + APP FS + APP FS

1 COPY of Image Get MNT(attach) for each container
From 1 Image - u can create Un limited of container

Docker Registry
----------------
	Contains - Repository
			Contains 
				Version of FILESYSTEM(B+R+U+A)
			=============
			Docker Image
	
		PUB 
			hub.docker.com
			google registry
			ECR
		PVT
			artifactory
			nexus
			registry

Container

HUMAN -- 
	Docker run image
	---------------------
	docker client --> docker server --Check LOCAL Registry(Do i have that image?
				NO - Download from hub to LR			
				YES - 
				ContainerD ----> Kernal
						- 1 net
						- 1 mnt using docker image
						- 1 user
						- 1 pid
						-------------------
						ATTACH USER with MNT + PID + NET
						---------------------------------
						Container
'



	






Docker Workflow- Refer above
===============================================
Assignment for Docker Day 1
---------------------------
Write a your notes for defining a docker, container, architecture and components and workflow in 1 page.

================================================
================================================
How to install Docker?
- 13.233.115.106
https://devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

    1  clear
    2  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    3  clear
    4  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    5  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    6  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    7  sudo yum install -y docker-ce
    8  docker -v
    9  clear
   10  clearsudo systemctl enable docker
   11  sudo systemctl enable docker
   12  sudo systemctl start docker
   13  clear
   14  docker
   15  clear
   16  which docker
   17  which dockerd
   18  which containerd
   19  ps -eaf | grep docker
   20  ps -eaf | grep containerd
   21  docker version
   22  clear
   23  docker infdo
   24  docker info
   25  clear
   26  clear
   27  history

VMS LifeCycle
--------------------------------
create -> start -> stop -> start -> restart -> pause -> unpause -> kill -> remove

Container LifeCycle
--------------------------------
create -> start -> stop -> start -> restart -> pause -> unpause -> kill -> remove
https://www.devopsschool.com/blog/lifecycle-of-docker-containers/

apache
--------------------
rootfs + user + apache app
  34  clear
   35  docker images
   36  docker ps
   37  docker ps -a
   38  docker pull httpd
   39  docker images
   40  clear
   41  docker create httpd
   42  docker ps
   43  docker ps -a
   44  docker create --name=raju1 httpd
   45  docker ps -a
   46  docker create --name=raju2 httpd
   47  docker ps -a
   48  docker start raju1
   49  docker ps -a
   50  docker start 9e557c2264d8
   51  docker ps -a
   52  clear
   53  docker ps -a
   54  docker stop raju1
   55  docker ps -a
   56  docker start raju1
   57  docker ps -a
   58  docker restart raju1
   59  docker ps -a
   60  docker pause raju1
   61  docker ps -a
   62  clear
   63  docker unpause raju1
   64  docker ps -a
   65  docker kill raju1
   66  docker ps -a
   67  docker rm raju1
   68  docker ps -a
============================================
PROOF
	Each container
			1 MNT		DONE
			1 USER		DONE
			1 NET		DONE
			1 PID MAPs
  72  docker ps
   73  docker ps -a
   74  clear
   75  docker ps
   76  docker inspect 9e557c2264d8
   77  clear
   78  docker inspect 9e557c2264d8 | grep -i ip
   79  docker ps -a
   80  docker start raju2
   81  docker inspect raju2 | grep -i ip
   82  curl http://172.17.0.2
   83  curl http://172.17.0.3
   84  curl http://172.17.0.4
   85  clear
   86  ls
   87  clear
   88  df -kh
   89  docker ps
   90  docker stop raju1
   91  docker stop raju2
   92  docker ps
   93  clear
   94  df -kh
   95  docker start raju2
   96  df -kh
   97  clear
   98  ls /var/lib/docker/overlay2/7b07df6504a20c7c0739cdc024ddef18bc5f5b78dce4b6d759f5969430d4ad21/merged
   99  ls /
  100  ls /var/lib/docker/overlay2/7b07df6504a20c7c0739cdc024ddef18bc5f5b78dce4b6d759f5969430d4ad21/merged
  101  clear
  102  df -kh
  103  docker exec raju2 df -kh
  104  clear
  105  history
  106  clear
  107  df -kh
  108  docker exec raju2 df -kh
  109  clear
  110  ps
  111  ps -eaf | grep 8796
  112  ps -eaf | grep 8794
  113  ps -eaf | grep 8771
  114  ps -eaf | grep 8770
  115  ps -eaf | grep 8289
  116  ps -eaf | grep 1446
  117  ps -eaf
  118  clear
  119  docker ps
  120  clear
  121  ps -eaf | grep containerd
  122  clear
  123  docker ps
  124  docker exec f63e7d0b6a2a ps -eaf
  125  docker exec f63e7d0b6a2a more
  126  clear
  127  docker exec f63e7d0b6a2a more /etc/passwd
  128  clear
  129  docker run -itd ubuntu
  130  docker ps
  131  docker exec a515d0fcce3f ps -eaf
  132  clear
  133  docker exec a515d0fcce3f ps -eaf
  134  ps -eaf
=============================================================================
Assignment 
---------------------------------------
What is diff between docker stop and docker kill?
What is diff between docker pause and docker unpause?



- 13.233.115.106
centos
centos123

[sudo -s] To become a root
=========================================================================================

How to connect vms?
----------------------------------------------
---> Go inside a vm and work using SHELL
---> Access a VM from outside Network





----------------------------------------------------------------------
Physical server is running		Virtual server is running	Container is running
as long as long				as long as long			as long as long
PID 1 is running			PID 1 is running		PID 1 is running

PID 1 is SYSTEMD			PID 1 is SYSTEMD		PID 1 can be ANYTHING
									- ls
									- bash
									- java
									- python
									- a
How to NOT EXIT?
-- backgroud process or DEAMON

python3
httpd-foreground
=======================================================
run
------------------------------------------
pull + create + start + get inside AKA attach to container PID 1

run -d
------------------------------------------
pull + create + start + do not get inside AKA deattach from container PID 1

=================================================


python file.py	==> docker image - ser PID 1=python
python2 file.py ==> docker image - ser PID 1=python2
					doker run python file.py

javac file.java



  151  docker stop -f $(docker ps -a -q)
  152   docker kill $(docker ps -q)
  153  docker rm -f $(docker ps -a -q)
  154  clear
  155  docker ps -a
  156  clear
  157  ls
  158  docker run httpd
  159  docker ps -a
  160  clear
  161  docker run ubuntu
  162  docker ps
  163  docker ps -a
  164  clear
  165  docker run -d httpd
  166  docker run -d httpd
  167  docker run -d httpd
  168  docker ps -a
  169  clear
  170  docker run -d ubuntu
  171  docker run -d ubuntu
  172  docker ps -a





How to use container?
----------------------------------------------
---> Go inside a container and work using SHELL
exec
	this would execute an executable inside a container
	You can interact with container using -it and bash option
		
  176  docker ps
  177  docker exec db939ca8d135 ls
  178  docker exec db939ca8d135 df -kh
  179  clear
  180  docker exec db939ca8d135 ps
  181  sdfsdf
  182  docker exec db939ca8d135 /bin/bash
  183  docker exec -it db939ca8d135 /bin/bash


attach

	this would attach to the PID1

 186  docker ps
  187  docker attach db939ca8d135
  188  docker ps
  189  clear
  190  docker run ubuntu
  191  docker ps -a
  192  clear
  193  docker run ubuntu /bin/bash
  194  docker ps -a
  195  clear
  196  docker run -it ubuntu /bin/bash
  197  docker ps -a
  198  clear
  199  docker run -it ubuntu /bin/bash
  200  docker ps
  201  docker run -itd ubuntu /bin/bash
  202  docker run -itd ubuntu /bin/bash
  203  docker run -itd ubuntu /bin/bash
  204  docker run -itd ubuntu /bin/bash
  205  docker run -itd ubuntu /bin/bash
  206  clear
  207  docker ps -a
  208  clear
  209  history
  210  clear
  211  docker ps
  212  docker attach 8ced223eed41





How to come out of the container without EXIT?
control + p+ q

=========================================


https://www.devopsschool.com/blog/the-docker-command-line-complete-referenece/


  228  docker ps
  229  ls
  230  docker cp test.py e98879e353af:/tmp
  231  docker exec e98879e353af ls /tmp
  232  ls
  233  rm -rf test
  234  rm -rf test.py
  235  clear
  236  ls
  237  docker cp e98879e353af:/tmp/test.py .


diff
	ADDED
	DELETED
	CHANGED

  240  clear
  241  docker ps
  242  docker attach e98879e353af
  243  clear
  244  docker ps
  245  docker diff e98879e353af
  246  history
cdocker


 248  docker ps
  249  docker rename practical_volhard raju
  250  docker ps





---> Access a container from outside Network

$ docker run -d -p 80:80 httpd

80:80 = HOST-PORT:Container-port


$ docker run -d -p 81:80 httpd
$ docker run -d -p 82:80 httpd

  253  docker run -d httpd
  254  docker ps
  255  docker inspect 62345f3070c4
  256  clear
  257  curl http://172.17.0.3
  258  clear
  259  docker run -d -p 80:80 http
  260  clear
  261  docker run -d -p 80:80 httpd
  262  docker ps
  263  docker run -d -p 81:80 httpd
  264  docker ps

 266  clear
  267  docker ps
  268  docker port 32d3e650bef8
  269  docker port 62345f3070c4

ASSIGNMENT
-------------------
update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes


